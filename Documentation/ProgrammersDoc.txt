Programmer’s Documentation - MetroGnome

Description: The Metronome application is a JavaScript-based tool for musicians to practice rhythm and tempo. It provides features such as setting the time signature, adjusting the beats per minute (BPM), and toggling polyrhythms. The application generates visual and auditory cues to help musicians maintain rhythm, as well as a tuner for their instruments.

Dependencies:
Web Browser: The application runs in a web browser and does not require any additional software.
Audio Files: The application uses audio files for generating metronome sounds. Ensure that the audio files are located in the specified directories (assets/tick.wav, assets/chime.wav, etc.).

Modules: This application has three main functions, a tuner, metronome, and rhythm tracker, each is contained within separate JavaScript files corresponding with the name of the module and followed by “.js”. Upon running the program, each of these are called on by “script.js” and initialized. Each of these are then linked back to “main.html” and “styles.css” which control the front end of the app.

RhythmTracker

Description: The RhythmTracker class provides functionality for tracking and visualizing rhythm patterns. It allows users to record rhythms, visualize them on a canvas, and synchronize them with an audio metronome.

Constructors:
audioContext: An instance of the AudioContext class used for audio processing and playback.

Properties:
canvas: Reference to the HTML canvas element used for drawing rhythm visualization.
canvasCtx: The 2D rendering context of the canvas for drawing.
analyser: An instance of the AnalyserNode interface for frequency-domain analysis of audio signals.
dataArray: An array buffer used to store frequency data obtained from the analyser.
sourceNode: The audio source node for processing audio input.
arrayBuffer: The buffer containing the audio data of the regular tick sound.
audioBuffer: The decoded audio data of the regular tick sound.
arrayBufferHigh: The buffer containing the audio data of the high note sound.
audioBufferHigh: The decoded audio data of the high note sound.
BPM: The beats per minute value for the metronome.
bars: The number of bars in the rhythm pattern.
beats: The number of beats per bar.
notePeriod: The duration of each beat in seconds.
sensitivity: The threshold value for beat detection.
temporalSensitivity: The temporal sensitivity for beat spacing.
lastBeatTime: The timestamp of the last detected beat.
beatSpacing: The expected time interval between consecutive beats.
startTime: The timestamp when recording starts.
metronomeBeatArray: An array to store the timestamps of metronome beats.
recordedBeatArray: An array to store the timestamps of recorded beats.
recording: A boolean flag indicating whether recording is active.
scheduledNodes: An array to store scheduled audio buffer source nodes.

Functions:
initialize(): Initializes the RhythmTracker instance by setting up audio processing, loading audio files, and starting the recording loop.
startRecording(button): Starts recording beats when the "Start" button is clicked.
stopRecording(button): Stops recording beats when the "Stop" button is clicked.
schedule(): Schedules the playback of metronome beats and initializes recording parameters.
clearScheduledNodes(): Stops and clears all scheduled audio buffer source nodes.
record(): Records beats by detecting audio input peaks and storing their timestamps.
draw(): Draws the rhythm visualization on the canvas, including metronome beats and recorded beats.

Metronome

Description: The Metronome class provides functionality for generating metronome beats, allowing users to customize the time signature, BPM (beats per minute), and polyrhythmic patterns. It offers the ability to toggle the metronome on/off and switch between standard and polyrhythmic modes.

Constructors:
audioContext: An instance of the AudioContext class used for audio processing and playback.



Properties:
audioContext: The audio context used for managing audio operations.
audioFiles: An array containing file paths of audio samples used for metronome sounds.
lastNote: The timestamp of the last played note.
lastNoteP: The timestamp of the last played note in polyrhythmic mode.
evalPeriod: The time interval in seconds for evaluating note playback.
playing: A boolean indicating whether the metronome is currently playing.
arrayBuffer: An array to store audio array buffers.
audioBuffer: An array to store decoded audio data buffers.
polyrhythmActive: A boolean indicating whether polyrhythmic mode is active.
intervalId: The ID of the interval used for scheduling notes.
onOff: A method to toggle the metronome on/off.
polyOnOff: A method to toggle polyrhythmic mode on/off.
timeSignatureContainer: Reference to the HTML element for time signature input.
barsContainer: Reference to the HTML element for bars container.
barContainer: Reference to the HTML element for standard bar container.
polyBarContainer: Reference to the HTML element for polyrhythmic bar container.
timeSignatureInput: Reference to the HTML input element for time signature.
bpmInput: Reference to the HTML input element for BPM.
polyInput: Reference to the HTML input element for polyrhythm time signature.
playButton: Reference to the HTML button element for play/pause functionality.
polyButton: Reference to the HTML button element for polyrhythm toggle functionality.
polyRatio: The ratio of polyrhythmic time signature to standard time signature.
currentBeat: The index of the current beat in standard mode.
currentBeatP: The index of the current beat in polyrhythmic mode.
timeSignature: The time signature value (beats per bar) in standard mode.
timeSignatureP: The time signature value (beats per bar) in polyrhythmic mode.
bpm: The BPM (beats per minute) value.
audiosPerBeat: An array to store selected audio indices per beat in standard mode.
audiosPerBeatP: An array to store selected audio indices per beat in polyrhythmic mode.
notePeriod: The duration of each beat in standard mode calculated based on BPM.
notePeriodP: The duration of each beat in polyrhythmic mode calculated based on BPM.

Functions:
initialize(): Initializes the metronome by setting up event listeners, loading audio files, and starting the scheduler.
onOff(): Toggles the metronome on/off and resets parameters when switched.
polyOnOff(): Toggles polyrhythmic mode on/off and updates UI elements accordingly.
playNote(): Plays the next metronome note in standard mode.
playNotePoly(): Plays the next metronome note in polyrhythmic mode.
scheduler(): Schedules the playback of metronome notes based on timing intervals.
noteToBePlayed(): Determines if a metronome note should be played based on timing and polyrhythmic mode.
generateBar(): Generates the visual representation of beats based on the selected time signature and polyrhythmic mode.
handleSoundSelection(event): Handles user selection of metronome sounds for beats.
updateMetronomeSound(selectedSound, beatIndex, track): Updates the selected metronome sound for a specific beat.

Tuner

Description: The Tuner class provides functionality for real-time audio analysis, specifically designed for tuning musical instruments. It utilizes the Web Audio API to access the microphone input, perform frequency analysis, and display the detected pitch and deviation in cents from the nearest note.

Constructors:
audioContext: An instance of the AudioContext class used for audio processing and playback.

Properties:
audioContext: The audio context used for managing audio operations.
pitchDisplay: Reference to the HTML element for displaying the detected pitch.
centsDisplay: Reference to the HTML element for displaying the deviation in cents.
pendulum: Reference to the HTML element representing the visual pendulum for tuning feedback.
isRunning: A boolean indicating whether the tuner is currently running.
stream: The media stream obtained from the user's microphone.
analyser: An instance of the AnalyserNode used for frequency analysis.
dataArray: An array to store frequency data obtained from the analyser.
animationFrameId: The ID of the animation frame used for updating the pitch display.

Functions:
initialize(): Initializes the tuner by setting up event listeners for the toggle button and initializes the audio stream and analyser.
startTuner(): Starts the tuner by accessing the user's microphone, setting up the analyser, and initiating the pitch display update loop.
stopTuner(): Stops the tuner by stopping the microphone stream, canceling the animation frame, and resetting the pitch and visual feedback displays.
pitchClassAndCents(pitch): Calculates the nearest note and deviation in cents from a given frequency pitch.
updatePitchDisplay(): Updates the pitch and deviation display in real-time based on the microphone input and frequency analysis.



Main.HTML

Header:

Title: Sets the page title to "Instrument Tuner".
"stylesheet": Links to an external CSS file “styles.css”.
Assets: Preloads images (chime.png, cowbell.png, cymbal.png) to improve performance.

Body Section:

Background Elements: Three div elements with classes bg, bg2, and bg3 for layered background styling.

Containers:
Instrument Tuner:
Displays pitch and cents.
Contains a pendulum visual for tuning feedback.
A button to start/stop the tuner.
Metronome:
Time Signature and BPM input fields.
Bars and polyrhythm display.
Sound selector (currently empty).
Play and Polyrhythm buttons.
Rhythm Tracker:
Displays rhythm on a canvas.
Contains BPM input field.
A button to play the rhythm tracker.




Java Script:

There is a link to four external JavaScript files at the end of the body that control the functionality of the application.

tuner.js - Manages the instrument tuner logic and animation.
rhythmTracker.js - Handles the rhythm tracker features.
metronome.js - Implements the metronome functionalities.
script.js - Initialize each of the three previous scripts with a single audioContext object




Styles.CSS

html & body: These set up the basic styling for the document. It standardizes things like font, margins, sets the background color, and centers the content both vertically and horizontally within your screen. 

bg1, bg2, b3: They are responsible for creating the animated gradient background effect seen in the HTML document. Each background element has specific animation properties to control things like animation, color opacity, etc. 

container: These rules define the styling for the containers used for the tuner and metronome sections. They set border styles, colors, background color, padding, border radius, box shadow, text alignment, margin, flex properties, and opacity. The containers are set to be flex containers with a column direction, allowing the content to be vertically aligned and spaced evenly within the container. This helps with implementation and styling.

horizontal-container: This rule styles the horizontal container used to align content horizontally.
It sets the display to flex with a row direction and centers the content horizontally using the justify-content property.

h1, h2, label: These style the header elements (h1 and h2) and labels used throughout the document. They define the font color, size, and margin to ensure consistent styling across headers and labels.



Specific Element Styling (#metronome-interface, #rhythm-display, #scrolling-triangle, #time-signature-container, #bpm-container, #pitch-display, #bar-container, #cents-display, button): Each of these are referenced to different aspects of style throughout the application. Each one sets properties such as margin, padding, font size, color, and alignment to achieve consistent visual styling.

button, button:hover: These style the buttons used in the document. They set the button dimensions, padding, font size, background color, text color, and cursor behavior.
The :hover pseudo-class changes the background color of the button when hovered over to provide visual feedback.

@keyframes slide: This defines a keyframe animation called slide. The animation moves the elements horizontally by translating them along the x-axis, creating a sliding effect. It starts from one side and moves to the other side, creating an infinite loop with an alternating direction.













